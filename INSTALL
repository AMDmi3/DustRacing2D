Build & install instructions
============================

These are build & install instructions for Dust Racing 2D.

Source code
===========

The source tree includes source code for the track editor and
the game itself. The game uses an 2D engine called MiniCore
written by Jussi Lind. The code is "documented" by using
Doxygen tags.

The source tree layout:

src/game/          : Source files for the game.
src/game/MiniCore/ : Graphics and physics engine.
src/game/MTFH/     : Menu Toolkit From Hell.
src/game/STFH/     : Sound Toolkit From Hell.
src/editor/        : Source files for the track editor.
src/common/        : Shared files between the editor and the game.
src/images/        : Some SVG-images used as the source for final images.
data/              : Data mapping and configuration files.
data/images/       : Image files and textures loaded by the game.
data/levels/       : Level data.
data/shaders/      : GLSL shaders.
packaging/         : Example packaging for Ubuntu/Debian.

Build systems
=============

The "official" build system for Linux is CMake.

There are also qmake project files for easier cross-compilation for Windows and Android. Qt5 is required.

I used to make Windows releases also with CMake, but in the future I'll cross-compile for Windows
on Ubuntu host by using MXE and qmake. MXE is a cool cross-compilation environment and all
libraries are linked statically by default (no DLLs needed).

Toolchains
==========

GCC/MinGW and Clang are the only "officially" supported toolchains.

Building with Microsoft Visual C++ is not tested.

Build dependencies
==================

Currently the build depends on Qt, libopenal and libvorbisfile.
On Linux pkg-config is required.

Dustrac also exploits some features of the C++11 standard,
so a somewhat compliant compiler is required (GCC >= 4.7).

Building in the command line on Linux (tested on Ubuntu 14.04)
=====================================================================

Development build (the game can be run without installing anything):
-------------------------------------------------------------------

1) Install Qt5 development files (qt5-default on Ubuntu 14.04).
2) Install OpenAL development files (libopenal-dev on Debian/Ubuntu).
3) Install Vorbis development files (libvorbis-dev on Debian/Ubuntu).
4) Install CMake (cmake on Debian/Ubuntu).
5) Go to the source directory and run:

$ ./configure

This runs CMake that generates the makefiles.

You can also run cmake directly or use Qt Creator to open the top-level
CMakeLists.txt and build inside Qt Creator. The configure script is only
for convenience and is just a wrapper for cmake.

Anyway, if everything went ok with cmake, run:

$ make

This will build the editor and the game binaries.

Run the game:

$ ./dustrac-game

Optionally run the track editor:

$ ./dustrac-editor

Run unit tests:

$ ctest

Release build (in this example game installs under /usr):
--------------------------------------------------------

$ ./configure -DReleaseBuild=1 -DCMAKE_INSTALL_PREFIX=/usr

This runs CMake that generates the makefiles.
If everything went ok, run:

$ make

This will build the editor and the game binaries.

Install the binaries and data files:

$ sudo make install

This installs also the desktop files so Dust Racing
should appear in your application menu.

Cross-compiling for Windows with MXE on Linux (tested on Ubuntu 13.10)
======================================================================

1) Install MXE (http://mxe.cc)
2) Install Qt5, Vorbis and OpenAL with MXE
3) Run <Your MXE installation dir>/usr/i686-pc-mingw32/qt5/bin/qmake dustrac.pro
4) make

There's also a script to build the game with a Windows installer:
1) export DUSTRAC_RELEASE_VERSION=x.y.z (use the latest version)
2) ./scripts/mxeWindowsBuild

The script checks that needed binaries are found.

CPack
=====

Dust Racing 2D has a support for CPack. It's not complete, but can be used to generate
some generic binary packages.

After a successful build run CPack:

$ cpack

This will generate .tar.gz and .sh binary packages on Linux.

For packagers
=============

The binaries only need to find the data dir that includes
all the runtime data. This can be set in the main CMakeLists.txt
and is given to the game via -DDATA_PATH.

The release build should be used when packaging (give
-DReleaseBuild=1 to cmake).

Currently the data files install to CMAKE_INSTALL_PREFIX/share/DustRacing
and the binaries install to CMAKE_INSTALL_PREFIX/bin.

CMAKE_INSTALL_PREFIX usually defaults to /usr/local and
can be changed by giving, for example, -DCMAKE_INSTALL_PREFIX=/usr
to cmake (or to the configure script).

There's an example Debian packaging in packaging/debian/.


-- Jussi Lind <jussi.lind@iki.fi>

